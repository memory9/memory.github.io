<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Cube Blog]]></title><description><![CDATA[A Personal blog by mingrui.]]></description><link>https://memory9.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 06 Jul 2019 06:46:37 GMT</lastBuildDate><item><title><![CDATA[exploring npm]]></title><description><![CDATA[npm 是目前默认的 Node 包管理工具，在 javaScript 项目开发中得到了广泛使用。node_modulesnpm…]]></description><link>https://memory9.github.io//exploring-npm/</link><guid isPermaLink="false">https://memory9.github.io//exploring-npm/</guid><pubDate>Fri, 05 Jul 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;npm 是目前默认的 Node 包管理工具，在 javaScript 项目开发中得到了广泛使用。&lt;/p&gt;
&lt;h2&gt;node_modules&lt;/h2&gt;
&lt;p&gt;npm 使用 &lt;code class=&quot;language-text&quot;&gt;npm install&lt;/code&gt; 命令安装模块到&lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 路径查找机制：默认情况下，模块查找对应的依赖包时，&lt;code class=&quot;language-text&quot;&gt;nodejs&lt;/code&gt; 会尝试从当前模块所在的目录开始，尝试在它的  &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 文件夹里加载相应的模块，如果没有找到，那么就再向上一级目录移动，直到到达全局安装路径中的 &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;npm 5.x 安装组织 node_modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扁平化安装&lt;/p&gt;
&lt;p&gt;按照 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 里依赖的顺序依次解析，遇到新的包就将其安装在第一级目录，后续安装时如果遇到一级目录已经存在的包，会按照约定版本进行判断。如果符合版本约定就会忽略，否则会将其依次安装在依赖包的目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加了 &lt;code class=&quot;language-text&quot;&gt;package-lock.json&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;用以精确描述 &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 目录下所有的包的树状依赖结构，每个包的版本号都是完全精确的。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;glob&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;7.1.3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;resolved&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://registry.npmjs.org/glob/-/glob-7.1.3.tgz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;integrity&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;requires&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;fs.realpath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;inflight&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^1.0.4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;inherits&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;minimatch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^3.0.4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;once&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^1.3.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;path-is-absolute&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以 &lt;code class=&quot;language-text&quot;&gt;glob&lt;/code&gt; 为例，&lt;code class=&quot;language-text&quot;&gt;package-lock.json&lt;/code&gt; 主要由以下几个字段进行描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;version&lt;/code&gt; 包唯一的版本号&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;resolved&lt;/code&gt; 安装源&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;integrity&lt;/code&gt; hash 值，表明包的完整性，用来验证包是否已经失效&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt; 如果为true，则此依赖关系仅是顶级模块的开发依赖关系或者是一个的传递依赖关系&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;requires&lt;/code&gt; 该依赖包所需要的依赖项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;依赖包&lt;/h2&gt;
&lt;h3&gt;依赖包的分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;dependencies&lt;/strong&gt; 业务依赖&lt;/p&gt;
&lt;p&gt;依赖项属于线上的一部分，例如 &lt;code class=&quot;language-text&quot;&gt;react&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;material-ui&lt;/code&gt; 等等，供生产环境使用。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;install&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;-i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;--save&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;-S&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;npm 5.x 之后，直接执行 &lt;code class=&quot;language-text&quot;&gt;npm i &amp;lt;packageName&amp;gt;&lt;/code&gt; 即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;devDependencies&lt;/strong&gt; 开发依赖&lt;/p&gt;
&lt;p&gt;依赖项只在项目开发时需要，不属于线上代码的一部分，例如 &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt; 等等&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;install&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;-i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;--save-dev&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;-D&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;peerDependencies 同伴依赖&lt;/p&gt;
&lt;p&gt;提示宿主环境安装插件在 &lt;code class=&quot;language-text&quot;&gt;peerDependencies&lt;/code&gt; 中指定依赖的包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bundledDependencies / bundleDependencies 打包依赖&lt;/p&gt;
&lt;p&gt;这种依赖跟 &lt;code class=&quot;language-text&quot;&gt;npm pack&lt;/code&gt; 打包命令相关，必须先在前两种依赖中声明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optionalDependencies 可选依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;依赖包的版本号&lt;/h3&gt;
&lt;p&gt;采用 &lt;a href=&quot;https://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;semver&lt;/a&gt; 规范作为依赖版本管理方案，格式一般为：&lt;strong&gt;主版本号.次版本号.修订号(x.y.z)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主版本号 major version&lt;/p&gt;
&lt;p&gt;可能是颠覆性的改动，导致可能会与低版本的 API 或者用法不兼容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次版本号 minor version&lt;/p&gt;
&lt;p&gt;改动通常兼容同一个大版本内的 API 和用法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果大版本号是 0，表示处于开发初始阶段，一切都可能被改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修订号 patch&lt;/p&gt;
&lt;p&gt;一般用于修复 bug 和细微的变更，通常要保持向前兼容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见的版本格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;”1.2.3” 精确版本号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“^1.2.3” ^ 能够兼容除了最左侧非 0 版本号之外的其他变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“~1.2.3” ~ 如果列出了次版本号，那么只兼容补丁的修改；如果没有列出次版本号，那么兼容 2、3 位的修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“1.x”、“1.X”、“1.&lt;em&gt;”、“1”、“\&lt;/em&gt;”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”*” 、“x” 或者 （空） 表示可以匹配任何版本。 &lt;/p&gt;
&lt;p&gt; “1.x”, “1.*” 和 “1” 表示匹配主版本号为 “1” 的所有版本，因此等价于 ”&gt;= 1.0.0 &amp;#x3C; 2.0.0”。 &lt;/p&gt;
&lt;p&gt; “1.2.x”, “1.2.*” 和 “1.2” 表示匹配版本号以 “1.2” 开头的所有版本，因此等价于 ”&gt;= 1.2.0 &amp;#x3C; 1.3.0”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带预发布关键词的版本号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;alpha(α)：预览版，或者叫内部测试版；一般不向外部发布，会有很多bug；一般只有测试人员使用。  beta(β)：测试版，或者叫公开测试版；这个阶段的版本会一直加入新的功能；在alpha版之后推出。  rc(release candidate)：最终测试版本；可能成为最终产品的候选版本，如果未出现问题则可发布成为正式版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;依赖包的版本管理&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 更新某模块主版本下的最新版本&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 更新到指定版本号&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName@x.x.x&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 卸载某个模块&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; uninstall &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;packageName&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;升级和卸载依赖包时，尽量通过命令实现，避免手动修改 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 中的版本号，&lt;strong&gt;一定不要手动修改 &lt;code class=&quot;language-text&quot;&gt;package-lock.json&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;npm scripts 脚本&lt;/h2&gt;
&lt;p&gt;npm 可以在 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 文件中，使用 &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt; 字段定义脚本命令。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node build.js&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;基本原理&lt;/h3&gt;
&lt;p&gt;每次执行 &lt;code class=&quot;language-text&quot;&gt;npm run&lt;/code&gt; 时，会自动新建一个 Shell，在这个 Shell 中执行指定的脚本命令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm run&lt;/code&gt;  新建的 Shell，会将当前目录中的 node_modules/.bin 子目录加入 &lt;code class=&quot;language-text&quot;&gt;PATH&lt;/code&gt; 变量中，执行结束后再将 &lt;code class=&quot;language-text&quot;&gt;PATH&lt;/code&gt; 变量恢复原样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，当前目录的 &lt;code class=&quot;language-text&quot;&gt;node_modules/.bin&lt;/code&gt; 子目录中的所有脚本，都可以直接使用脚本名调用，而不需要加上路径。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PATH&lt;/code&gt;环境变量，是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到哪些目录下去寻找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;传参&lt;/h3&gt;
&lt;p&gt;除了第一个可执行的命令，以空格分割的任何字符串（除了一些 shell 的语法）都是参数，并且都能通过&lt;code class=&quot;language-text&quot;&gt;process.argv&lt;/code&gt; 属性访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;process.argv属性返回一个数组，这个数组包含了启动node进程时的命令行参数。第一个元素为启动node 进程的可执行文件的绝对路径名&lt;a href=&quot;https://link.juejin.im?target=http%3A%2F%2Fnodejs.cn%2Fapi%2Fprocess.html%23process_process_execpath&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;process.execPath&lt;/a&gt;，第二个元素为当前执行的JavaScript文件路径。剩余的元素为其他命令行参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve --params     &lt;span class=&quot;token comment&quot;&gt;# 参数params将转化成process.env.npm_config_params = true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve --params&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;123 &lt;span class=&quot;token comment&quot;&gt;# 参数params将转化成process.env.npm_config_params = 123&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve -params      &lt;span class=&quot;token comment&quot;&gt;# 等同于--params参数&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve -- --params  &lt;span class=&quot;token comment&quot;&gt;# 将--params参数添加到process.env.argv数组中&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve params       &lt;span class=&quot;token comment&quot;&gt;# 将params参数添加到process.env.argv数组中&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run serve -- params    &lt;span class=&quot;token comment&quot;&gt;# 将params参数添加到process.env.argv数组中&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;通配符&lt;/h3&gt;
&lt;p&gt;npm 脚本即 Shell 脚本，所以可以使用 Shell 通配符。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jshint *.js&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jshint **/*.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt; 表示任意文件名，&lt;code class=&quot;language-text&quot;&gt;**&lt;/code&gt; 表示任意一层子目录。&lt;/p&gt;
&lt;h3&gt;多命令运行&lt;/h3&gt;
&lt;h4&gt;串行执行&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run script1 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run script2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;只要一个命令执行失败，则整个脚本终止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;并行执行&lt;/h4&gt;
&lt;p&gt;多个任务可以同时的平行执行，使用 &lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt; 符号来连接。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run script1 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run script2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;env 环境变量&lt;/h3&gt;
&lt;p&gt;执行 &lt;code class=&quot;language-text&quot;&gt;npm scripts&lt;/code&gt; 时，&lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; 会设置一些特殊的 &lt;code class=&quot;language-text&quot;&gt;env&lt;/code&gt; 环境变量。&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 中的所有字段都会被设置为以 &lt;code class=&quot;language-text&quot;&gt;npm_package_&lt;/code&gt; 开头的环境变量。例如使用 &lt;code class=&quot;language-text&quot;&gt;process.env.npm_package_name&lt;/code&gt; 可以获取到 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 中 &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; 字段的值。&lt;code class=&quot;language-text&quot;&gt;process.env.npm_lifecycle_event&lt;/code&gt; 表示当前正在运行的脚本名称。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些环境变量都只能在 npm run 的脚本执行环境内拿到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;指令钩子&lt;/h3&gt;
&lt;p&gt;npm 脚本有 &lt;code class=&quot;language-text&quot;&gt;pre&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;post&lt;/code&gt; 两个钩子。例如：&lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 脚本命令的钩子就是 &lt;code class=&quot;language-text&quot;&gt;prebuild&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;postbuild&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在执行  &lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt; 命令时，就会依次执行 &lt;code class=&quot;language-text&quot;&gt;npm run prebuild&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;npm run build&lt;/code&gt;、&lt;code class=&quot;language-text&quot;&gt;npm run postbuild&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以结合 &lt;code class=&quot;language-text&quot;&gt;process.env.npm_lifecycle_event&lt;/code&gt; 一起使用。&lt;/p&gt;
&lt;h2&gt;npm 配置项&lt;/h2&gt;
&lt;h3&gt;优先级&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Command Line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;env 环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npmrc 文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 只作用在本项目下，其他项目中不生效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;~/.npmrc&lt;/code&gt;  使用 &lt;code class=&quot;language-text&quot;&gt;npm config get userconfig&lt;/code&gt; 可以查看存放的路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;$PREFIX/etc/npmrc&lt;/code&gt; 使用 &lt;code class=&quot;language-text&quot;&gt;npm config get globalconfig&lt;/code&gt; 可以查看存放的路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;npm config 指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 如果 key 不存在，那么会将新增到配置中；如果省略 value，那么会将 key 设置为 true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;value&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-g&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;--global&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 指定 npm 包来源&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; registry &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;url&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;get&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config get &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config delete &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 不能删除项目级的 .npmrc 文件里的配置项&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config list &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-l&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;--json&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 查看所有配置项&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;edit&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config edit &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-g&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;--global&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 编辑器中打开配置文件&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多默认配置参见&lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fdocs.npmjs.com%2Fmisc%2Fconfig&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;npm config&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;npm 工程管理&lt;/h2&gt;
&lt;h3&gt;项目版本号管理&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 中的 &lt;code class=&quot;language-text&quot;&gt;version&lt;/code&gt; 字段代表的是该项目的版本号。&lt;/p&gt;
&lt;p&gt;尽量使用 &lt;code class=&quot;language-text&quot;&gt;npm version&lt;/code&gt; 指令来自动更新 &lt;code class=&quot;language-text&quot;&gt;version&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;1.2.3  &lt;span class=&quot;token comment&quot;&gt;# 显示设置版本号为 1.2.3 &lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version major  &lt;span class=&quot;token comment&quot;&gt;# 大版本号加 1，其余版本号归 0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version minor  &lt;span class=&quot;token comment&quot;&gt;# 小版本号加 1，修订号归 0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version patch  &lt;span class=&quot;token comment&quot;&gt;# 修订号加 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以创建预发布版本：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 当前版本号为 1.2.3&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version prepatch  &lt;span class=&quot;token comment&quot;&gt;# 版本号变为 1.2.4-0，也就是 1.2.4 版本的第一个预发布版本&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version preminor  &lt;span class=&quot;token comment&quot;&gt;# 版本号变为 1.3.0-0，也就是 1.3.0 版本的第一个预发布版本&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version premajor  &lt;span class=&quot;token comment&quot;&gt;# 版本号变为 2.0.0-0，也就是 2.0.0 版本的第一个预发布版本&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version prerelease  &lt;span class=&quot;token comment&quot;&gt;# 版本号变为 2.0.0-1，也就是使预发布版本号加一&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;在 git 环境中，执行 npm version 修改版本号之后，还会默认执行 git add -&gt; git commit -&gt; git tag 操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其 commit message 默认是自动修改完成的版本号，可以通过添加 -m/—message 选项来自定义 commit message：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; version minor -m &lt;span class=&quot;token string&quot;&gt;&quot;feat(version): upgrade to %s for reasons&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# %s 会自动替换为新版本号&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不想在 git 仓库中打上版本 tag，可以在指令中使用 &lt;code class=&quot;language-text&quot;&gt;--no-git-tag-version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想默认不影响 git 仓库，可以在 npm 设置中禁止：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; git-tag-version &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 不自动打 tag&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; commit-hooks &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;# 不自动 commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;域级包管理&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; 中的依赖有两种形式：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;@commitlint/cli&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^7.2.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;commitizen&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^3.0.4&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以 &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt; 开头的包名，是一个&lt;a href=&quot;https://docs.npmjs.com/misc/scope#publishing-public-scoped-packages-to-the-public-npm-registry&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;域级包&lt;/a&gt;，作用是将一些 packages 集中在一个命名空间下，一方面可以集中管理，另一方面也可以防止与其他依赖包产生命名冲突。&lt;/p&gt;
&lt;h4&gt;域级包的发布&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在项目的 package.json 的 name 属性中添加 scope 相关的声明，可以通过指令添加：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init --scope&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;scopeName -y&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package.json 变为：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@scopeName/package&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;由于用 &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt; 声明了该包，npm 会将其认定为私有包，而在 npm 上托管私有包需要收费，所以可以在发布时添加&lt;code class=&quot;language-text&quot;&gt;--access=public&lt;/code&gt; 参数告知 &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; 这不是私有包。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; publish --access&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;安装域级包时需要按照域级包全名来安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;其它&lt;/h2&gt;
&lt;h3&gt;模块全局化&lt;/h3&gt;
&lt;p&gt;假设你在开发一个模块 &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt;，同时需要在另外一个项目 &lt;code class=&quot;language-text&quot;&gt;B&lt;/code&gt; 中测试它，当然你可以将该模块的代码拷贝到需要使用它的项目中，但这也不是理想的方法，可以在模块 &lt;code class=&quot;language-text&quot;&gt;A&lt;/code&gt; 的目录下执行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm link&lt;/code&gt; 命令通过链接目录和可执行文件，实现任意位置的&lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt;包命令的全局可执行。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm link&lt;/code&gt; 主要做了两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为目标 &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; 模块创建软链接，将其链接到全局 &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; 模块安装路径 &lt;code class=&quot;language-text&quot;&gt;/usr/local/lib/node_modules/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为目标 &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt;模块的可执行 &lt;code class=&quot;language-text&quot;&gt;bin&lt;/code&gt; 文件创建软链接，将其链接到全局 &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt; 命令安装路径 &lt;code class=&quot;language-text&quot;&gt;/usr/local/bin/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;依赖锁定&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; 默认安装模块时，会通过脱字符 &lt;code class=&quot;language-text&quot;&gt;^&lt;/code&gt; 来限定所安装模块的主版本号。可以配置 &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt; 通过波浪符 &lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt; 来限定安装模块版本号：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; save-prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;~&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以配置仅安装精确版本号的模块&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; save-exact &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d08d3d3f265da1b7e103a4d&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;前端工程化（5）：你所需要的npm知识储备都在这了&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/01/npm-install.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;npm 模块安装机制简介&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;npm scripts 使用指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Flexbox 布局]]></title><description><![CDATA[Flex 是 Flexible Box 的缩写，意为弹性布局。Flex 布局适用于应用程序的组件和小规模布局。基本概念采用 Flex 布局的元素称为 flex 容器（flex container），而其子元素则称为 flex 项目（flex items）。flex box…]]></description><link>https://memory9.github.io//flex-box/</link><guid isPermaLink="false">https://memory9.github.io//flex-box/</guid><pubDate>Thu, 16 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Flex 是 Flexible Box 的缩写，意为弹性布局。Flex 布局适用于应用程序的组件和小规模布局。&lt;/p&gt;
&lt;h1&gt;基本概念&lt;/h1&gt;
&lt;p&gt;采用 Flex 布局的元素称为 flex 容器（flex container），而其子元素则称为 flex 项目（flex items）。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/07/26/5b598f7be9d37.png&quot; alt=&quot;flex box&quot;&gt;&lt;/p&gt;
&lt;p&gt;容器中有两根轴，分别是主轴（main axis）和交叉轴（cross axis）。&lt;/p&gt;
&lt;p&gt;项目默认沿着主轴排列，一个项目占据的主轴空间为 main size，占据的交叉轴空间为 cross size。&lt;/p&gt;
&lt;h1&gt;容器属性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;flex-direction&lt;/code&gt; 决定主轴的方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row（默认值）：水平，从左到右&lt;/li&gt;
&lt;li&gt;row-reverse：水平，从右往左&lt;/li&gt;
&lt;li&gt;column：垂直，从上到下&lt;/li&gt;
&lt;li&gt;column-reverse：垂直，从下往上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;flex-wrap&lt;/code&gt; 决定当一条轴线排不下时，如何换行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nowrap：不换行&lt;/li&gt;
&lt;li&gt;wrap：换行，顺序从上到下&lt;/li&gt;
&lt;li&gt;wrap-reverse：换行，从下往上（即第一行在下）
&lt;img src=&quot;https://i.loli.net/2018/07/26/5b5995094f110.png&quot; alt=&quot;wrap-reverse-demo&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;flex-flow&lt;/code&gt; 为 flex-direction 和 flex-wrap 的合并形式&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;&lt;span class=&quot;token string&quot;&gt;&apos;flex-direction&gt; || &amp;lt;&apos;&lt;/span&gt;flex-wrap&apos;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认值是 row nowrap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;justify-content&lt;/code&gt; 定义项目在主轴上的对齐方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start：左对齐&lt;/li&gt;
&lt;li&gt;flex-end：右对齐&lt;/li&gt;
&lt;li&gt;center：居中&lt;/li&gt;
&lt;li&gt;space-between：两端对齐，flex-item 之间的间距相等&lt;/li&gt;
&lt;li&gt;space-around：每个 flex-item 两侧间隔相等，则项目之间的间隔是与边框间隔的两倍。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-items&lt;/code&gt; 定义项目在交叉轴上如何对齐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start：交叉轴起点对齐&lt;/li&gt;
&lt;li&gt;flex-end：交叉轴终点对齐&lt;/li&gt;
&lt;li&gt;center：交叉轴中点对齐&lt;/li&gt;
&lt;li&gt;baseline：项目的第一行文字的基线对齐&lt;/li&gt;
&lt;li&gt;stretch（默认值）：项目将拉伸撑满整个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;align-content&lt;/code&gt; 定义多根轴线的对齐方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start：与交叉轴起点对齐&lt;/li&gt;
&lt;li&gt;flex-end：与交叉轴终点对齐&lt;/li&gt;
&lt;li&gt;center：与交叉轴的中点对齐&lt;/li&gt;
&lt;li&gt;space-between：与交叉轴两端对齐，轴线之间间隔平均分布&lt;/li&gt;
&lt;li&gt;space-around：每根轴线两侧的间隔都相等&lt;/li&gt;
&lt;li&gt;stretch（默认值）：轴线占满整个交叉轴
&lt;img src=&quot;https://i.loli.net/2018/07/27/5b5a812c5d469.png&quot; alt=&quot;align-content-demo&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;项目属性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;order&lt;/code&gt; 定义项目的排列顺序。数值越小越靠前，默认是0&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex-grow&lt;/code&gt; 定义项目的放大比例，默认是0&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex-shrink&lt;/code&gt; 定义项目的缩小比例，默认为1，即如果剩余空间不足，该项目将缩小&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex-basis&lt;/code&gt; 定义项目占据的主轴空间（main size），浏览器根据该属性，计算主轴是否有多余空间。默认值是 auto&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;flex&lt;/code&gt; 是 [&amp;#x3C;‘flex-grow’&gt;&amp;#x3C;‘flex-shrink’&gt;&amp;#x3C;‘flex-basis’&gt;] 的简写。默认值是 0 1 auto。快捷值：auto（1 1 auto）和 none（0 0 auto）&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;align-self&lt;/code&gt; 允许单个项目有不同的对齐方式，可以覆盖 align-items 属性，默认值是 auto，表示继承父元素的 align-items 属性，如果没有父元素则等同于 stretch&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考示例：
&lt;a href=&quot;https://codepen.io/LandonSchropp/pen/KpzzGo&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;骰子的布局&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考来源：
&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;A Complete Guide to Flexbox&lt;/a&gt;
[阮一峰 Flex 布局教程：语法篇](&lt;/p&gt;</content:encoded></item></channel></rss>