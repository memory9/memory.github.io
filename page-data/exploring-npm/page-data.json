{"componentChunkName":"component---src-templates-blog-post-js","path":"/exploring-npm/","webpackCompilationHash":"553e2d45f9700b050e58","result":{"data":{"site":{"siteMetadata":{"title":"Cube Blog","author":"memory"}},"markdownRemark":{"id":"66dc702f-0416-5725-ae3a-6fadb9fbf808","html":"<p>npm 是目前默认的 Node 包管理工具，在 javaScript 项目开发中得到了广泛使用。</p>\n<h2>node_modules</h2>\n<p>npm 使用 <code class=\"language-text\">npm install</code> 命令安装模块到<code class=\"language-text\">node_modules</code> 目录下。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>packageName<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">node_modules</code> 路径查找机制：默认情况下，模块查找对应的依赖包时，<code class=\"language-text\">nodejs</code> 会尝试从当前模块所在的目录开始，尝试在它的  <code class=\"language-text\">node_modules</code> 文件夹里加载相应的模块，如果没有找到，那么就再向上一级目录移动，直到到达全局安装路径中的 <code class=\"language-text\">node_modules</code> 为止。</p>\n</blockquote>\n<h3>npm 5.x 安装组织 node_modules</h3>\n<ul>\n<li>\n<p>扁平化安装</p>\n<p>按照 <code class=\"language-text\">package.json</code> 里依赖的顺序依次解析，遇到新的包就将其安装在第一级目录，后续安装时如果遇到一级目录已经存在的包，会按照约定版本进行判断。如果符合版本约定就会忽略，否则会将其依次安装在依赖包的目录下。</p>\n</li>\n<li>\n<p>增加了 <code class=\"language-text\">package-lock.json</code> 文件</p>\n<p>用以精确描述 <code class=\"language-text\">node_modules</code> 目录下所有的包的树状依赖结构，每个包的版本号都是完全精确的。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"glob\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.1.3\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"resolved\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://registry.npmjs.org/glob/-/glob-7.1.3.tgz\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"integrity\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"fs.realpath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"inflight\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.4\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"inherits\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"minimatch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.0.4\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"once\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.3.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path-is-absolute\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以 <code class=\"language-text\">glob</code> 为例，<code class=\"language-text\">package-lock.json</code> 主要由以下几个字段进行描述：</p>\n<ul>\n<li><code class=\"language-text\">version</code> 包唯一的版本号</li>\n<li><code class=\"language-text\">resolved</code> 安装源</li>\n<li><code class=\"language-text\">integrity</code> hash 值，表明包的完整性，用来验证包是否已经失效</li>\n<li><code class=\"language-text\">dev</code> 如果为true，则此依赖关系仅是顶级模块的开发依赖关系或者是一个的传递依赖关系</li>\n<li><code class=\"language-text\">requires</code> 该依赖包所需要的依赖项</li>\n</ul>\n</li>\n</ul>\n<h2>依赖包</h2>\n<h3>依赖包的分类</h3>\n<ul>\n<li>\n<p><strong>dependencies</strong> 业务依赖</p>\n<p>依赖项属于线上的一部分，例如 <code class=\"language-text\">react</code>、<code class=\"language-text\">material-ui</code> 等等，供生产环境使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token punctuation\">[</span>install<span class=\"token operator\">|</span>-i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>packageName<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>--save<span class=\"token operator\">|</span>-S<span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>npm 5.x 之后，直接执行 <code class=\"language-text\">npm i &lt;packageName&gt;</code> 即可</p>\n</blockquote>\n</li>\n<li>\n<p><strong>devDependencies</strong> 开发依赖</p>\n<p>依赖项只在项目开发时需要，不属于线上代码的一部分，例如 <code class=\"language-text\">webpack</code>、<code class=\"language-text\">babel</code> 等等</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token punctuation\">[</span>install<span class=\"token operator\">|</span>-i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>packageName<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>--save-dev<span class=\"token operator\">|</span>-D<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>peerDependencies 同伴依赖</p>\n<p>提示宿主环境安装插件在 <code class=\"language-text\">peerDependencies</code> 中指定依赖的包。</p>\n</li>\n<li>\n<p>bundledDependencies / bundleDependencies 打包依赖</p>\n<p>这种依赖跟 <code class=\"language-text\">npm pack</code> 打包命令相关，必须先在前两种依赖中声明。</p>\n</li>\n<li>optionalDependencies 可选依赖</li>\n</ul>\n<h3>依赖包的版本号</h3>\n<p>采用 <a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">semver</a> 规范作为依赖版本管理方案，格式一般为：<strong>主版本号.次版本号.修订号(x.y.z)</strong></p>\n<ul>\n<li>\n<p>主版本号 major version</p>\n<p>可能是颠覆性的改动，导致可能会与低版本的 API 或者用法不兼容。</p>\n</li>\n<li>\n<p>次版本号 minor version</p>\n<p>改动通常兼容同一个大版本内的 API 和用法。</p>\n<blockquote>\n<p>如果大版本号是 0，表示处于开发初始阶段，一切都可能被改变。</p>\n</blockquote>\n</li>\n<li>\n<p>修订号 patch</p>\n<p>一般用于修复 bug 和细微的变更，通常要保持向前兼容。</p>\n</li>\n</ul>\n<p>常见的版本格式：</p>\n<ul>\n<li>”1.2.3” 精确版本号</li>\n<li>“^1.2.3” ^ 能够兼容除了最左侧非 0 版本号之外的其他变化</li>\n<li>“~1.2.3” ~ 如果列出了次版本号，那么只兼容补丁的修改；如果没有列出次版本号，那么兼容 2、3 位的修改</li>\n<li>\n<p>“1.x”、“1.X”、“1.<em>”、“1”、“\\</em>”</p>\n<blockquote>\n<p>”*” 、“x” 或者 （空） 表示可以匹配任何版本。 </p>\n<p> “1.x”, “1.*” 和 “1” 表示匹配主版本号为 “1” 的所有版本，因此等价于 ”>= 1.0.0 &#x3C; 2.0.0”。 </p>\n<p> “1.2.x”, “1.2.*” 和 “1.2” 表示匹配版本号以 “1.2” 开头的所有版本，因此等价于 ”>= 1.2.0 &#x3C; 1.3.0”。</p>\n</blockquote>\n</li>\n<li>\n<p>带预发布关键词的版本号</p>\n<blockquote>\n<p>alpha(α)：预览版，或者叫内部测试版；一般不向外部发布，会有很多bug；一般只有测试人员使用。  beta(β)：测试版，或者叫公开测试版；这个阶段的版本会一直加入新的功能；在alpha版之后推出。  rc(release candidate)：最终测试版本；可能成为最终产品的候选版本，如果未出现问题则可发布成为正式版本。</p>\n</blockquote>\n</li>\n</ul>\n<h3>依赖包的版本管理</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 更新某模块主版本下的最新版本</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>packageName<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 更新到指定版本号</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>packageName@x.x.x<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 卸载某个模块</span>\n<span class=\"token function\">npm</span> uninstall <span class=\"token operator\">&lt;</span>packageName<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p>升级和卸载依赖包时，尽量通过命令实现，避免手动修改 <code class=\"language-text\">package.json</code> 中的版本号，<strong>一定不要手动修改 <code class=\"language-text\">package-lock.json</code></strong></p>\n</blockquote>\n<h2>npm scripts 脚本</h2>\n<p>npm 可以在 <code class=\"language-text\">package.json</code> 文件中，使用 <code class=\"language-text\">scripts</code> 字段定义脚本命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build.js\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>基本原理</h3>\n<p>每次执行 <code class=\"language-text\">npm run</code> 时，会自动新建一个 Shell，在这个 Shell 中执行指定的脚本命令。</p>\n<blockquote>\n<p><code class=\"language-text\">npm run</code>  新建的 Shell，会将当前目录中的 node_modules/.bin 子目录加入 <code class=\"language-text\">PATH</code> 变量中，执行结束后再将 <code class=\"language-text\">PATH</code> 变量恢复原样。</p>\n</blockquote>\n<p>因此，当前目录的 <code class=\"language-text\">node_modules/.bin</code> 子目录中的所有脚本，都可以直接使用脚本名调用，而不需要加上路径。</p>\n<blockquote>\n<p><code class=\"language-text\">PATH</code>环境变量，是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到哪些目录下去寻找。</p>\n</blockquote>\n<h3>传参</h3>\n<p>除了第一个可执行的命令，以空格分割的任何字符串（除了一些 shell 的语法）都是参数，并且都能通过<code class=\"language-text\">process.argv</code> 属性访问。</p>\n<blockquote>\n<p>process.argv属性返回一个数组，这个数组包含了启动node进程时的命令行参数。第一个元素为启动node 进程的可执行文件的绝对路径名<a href=\"https://link.juejin.im?target=http%3A%2F%2Fnodejs.cn%2Fapi%2Fprocess.html%23process_process_execpath\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">process.execPath</a>，第二个元素为当前执行的JavaScript文件路径。剩余的元素为其他命令行参数。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run serve --params     <span class=\"token comment\"># 参数params将转化成process.env.npm_config_params = true</span>\n<span class=\"token function\">npm</span> run serve --params<span class=\"token operator\">=</span><span class=\"token number\">123</span> <span class=\"token comment\"># 参数params将转化成process.env.npm_config_params = 123</span>\n<span class=\"token function\">npm</span> run serve -params      <span class=\"token comment\"># 等同于--params参数</span>\n\n<span class=\"token function\">npm</span> run serve -- --params  <span class=\"token comment\"># 将--params参数添加到process.env.argv数组中</span>\n<span class=\"token function\">npm</span> run serve params       <span class=\"token comment\"># 将params参数添加到process.env.argv数组中</span>\n<span class=\"token function\">npm</span> run serve -- params    <span class=\"token comment\"># 将params参数添加到process.env.argv数组中</span></code></pre></div>\n<h3>通配符</h3>\n<p>npm 脚本即 Shell 脚本，所以可以使用 Shell 通配符。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token string\">\"lint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"jshint *.js\"</span>\n<span class=\"token string\">\"lint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"jshint **/*.js\"</span></code></pre></div>\n<p><code class=\"language-text\">*</code> 表示任意文件名，<code class=\"language-text\">**</code> 表示任意一层子目录。</p>\n<h3>多命令运行</h3>\n<h4>串行执行</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run script1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> run script2</code></pre></div>\n<blockquote>\n<p>只要一个命令执行失败，则整个脚本终止。</p>\n</blockquote>\n<h4>并行执行</h4>\n<p>多个任务可以同时的平行执行，使用 <code class=\"language-text\">&amp;</code> 符号来连接。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run script1 <span class=\"token operator\">&amp;</span> <span class=\"token function\">npm</span> run script2</code></pre></div>\n<h3>env 环境变量</h3>\n<p>执行 <code class=\"language-text\">npm scripts</code> 时，<code class=\"language-text\">npm</code> 会设置一些特殊的 <code class=\"language-text\">env</code> 环境变量。<code class=\"language-text\">package.json</code> 中的所有字段都会被设置为以 <code class=\"language-text\">npm_package_</code> 开头的环境变量。例如使用 <code class=\"language-text\">process.env.npm_package_name</code> 可以获取到 <code class=\"language-text\">package.json</code> 中 <code class=\"language-text\">name</code> 字段的值。<code class=\"language-text\">process.env.npm_lifecycle_event</code> 表示当前正在运行的脚本名称。</p>\n<blockquote>\n<p>这些环境变量都只能在 npm run 的脚本执行环境内拿到。</p>\n</blockquote>\n<h3>指令钩子</h3>\n<p>npm 脚本有 <code class=\"language-text\">pre</code> 和 <code class=\"language-text\">post</code> 两个钩子。例如：<code class=\"language-text\">build</code> 脚本命令的钩子就是 <code class=\"language-text\">prebuild</code> 和 <code class=\"language-text\">postbuild</code>。</p>\n<p>在执行  <code class=\"language-text\">npm run build</code> 命令时，就会依次执行 <code class=\"language-text\">npm run prebuild</code>、<code class=\"language-text\">npm run build</code>、<code class=\"language-text\">npm run postbuild</code>。</p>\n<p>可以结合 <code class=\"language-text\">process.env.npm_lifecycle_event</code> 一起使用。</p>\n<h2>npm 配置项</h2>\n<h3>优先级</h3>\n<ol>\n<li>Command Line</li>\n<li>env 环境变量</li>\n<li>\n<p>npmrc 文件</p>\n<ul>\n<li>项目级</li>\n</ul>\n<p> 只作用在本项目下，其他项目中不生效。</p>\n<ul>\n<li>用户级</li>\n</ul>\n<p> <code class=\"language-text\">~/.npmrc</code>  使用 <code class=\"language-text\">npm config get userconfig</code> 可以查看存放的路径。</p>\n<ul>\n<li>全局级</li>\n</ul>\n<p> <code class=\"language-text\">$PREFIX/etc/npmrc</code> 使用 <code class=\"language-text\">npm config get globalconfig</code> 可以查看存放的路径。</p>\n</li>\n</ol>\n<h3>npm config 指令</h3>\n<ul>\n<li>set</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 如果 key 不存在，那么会将新增到配置中；如果省略 value，那么会将 key 设置为 true</span>\n<span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>-g<span class=\"token operator\">|</span>--global<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 指定 npm 包来源</span>\n<span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>get</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config get <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>delete</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config delete <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span> <span class=\"token comment\"># 不能删除项目级的 .npmrc 文件里的配置项</span></code></pre></div>\n<ul>\n<li>list</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config list <span class=\"token punctuation\">[</span>-l<span class=\"token operator\">|</span>--json<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 查看所有配置项</span></code></pre></div>\n<ul>\n<li>edit</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config edit <span class=\"token punctuation\">[</span>-g<span class=\"token operator\">|</span>--global<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 编辑器中打开配置文件</span></code></pre></div>\n<p>更多默认配置参见<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fdocs.npmjs.com%2Fmisc%2Fconfig\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm config</a></p>\n<h2>npm 工程管理</h2>\n<h3>项目版本号管理</h3>\n<p><code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">version</code> 字段代表的是该项目的版本号。</p>\n<p>尽量使用 <code class=\"language-text\">npm version</code> 指令来自动更新 <code class=\"language-text\">version</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> version <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token number\">1.2</span>.3  <span class=\"token comment\"># 显示设置版本号为 1.2.3 </span>\n<span class=\"token function\">npm</span> version major  <span class=\"token comment\"># 大版本号加 1，其余版本号归 0</span>\n<span class=\"token function\">npm</span> version minor  <span class=\"token comment\"># 小版本号加 1，修订号归 0</span>\n<span class=\"token function\">npm</span> version patch  <span class=\"token comment\"># 修订号加 1</span></code></pre></div>\n<p>还可以创建预发布版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 当前版本号为 1.2.3</span>\n<span class=\"token function\">npm</span> version prepatch  <span class=\"token comment\"># 版本号变为 1.2.4-0，也就是 1.2.4 版本的第一个预发布版本</span>\n<span class=\"token function\">npm</span> version preminor  <span class=\"token comment\"># 版本号变为 1.3.0-0，也就是 1.3.0 版本的第一个预发布版本</span>\n<span class=\"token function\">npm</span> version premajor  <span class=\"token comment\"># 版本号变为 2.0.0-0，也就是 2.0.0 版本的第一个预发布版本</span>\n<span class=\"token function\">npm</span> version prerelease  <span class=\"token comment\"># 版本号变为 2.0.0-1，也就是使预发布版本号加一</span></code></pre></div>\n<p><strong>在 git 环境中，执行 npm version 修改版本号之后，还会默认执行 git add -> git commit -> git tag 操作</strong></p>\n<p>其 commit message 默认是自动修改完成的版本号，可以通过添加 -m/—message 选项来自定义 commit message：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> version minor -m <span class=\"token string\">\"feat(version): upgrade to %s for reasons\"</span> <span class=\"token comment\"># %s 会自动替换为新版本号</span></code></pre></div>\n<p>如果不想在 git 仓库中打上版本 tag，可以在指令中使用 <code class=\"language-text\">--no-git-tag-version</code></p>\n<p>如果想默认不影响 git 仓库，可以在 npm 设置中禁止：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> git-tag-version <span class=\"token boolean\">false</span> <span class=\"token comment\"># 不自动打 tag</span>\n<span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> commit-hooks <span class=\"token boolean\">false</span>    <span class=\"token comment\"># 不自动 commit</span></code></pre></div>\n<h3>域级包管理</h3>\n<p><code class=\"language-text\">package.json</code> 中的依赖有两种形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@commitlint/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^7.2.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"commitizen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.0.4\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以 <code class=\"language-text\">@</code> 开头的包名，是一个<a href=\"https://docs.npmjs.com/misc/scope#publishing-public-scoped-packages-to-the-public-npm-registry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">域级包</a>，作用是将一些 packages 集中在一个命名空间下，一方面可以集中管理，另一方面也可以防止与其他依赖包产生命名冲突。</p>\n<h4>域级包的发布</h4>\n<ul>\n<li>在项目的 package.json 的 name 属性中添加 scope 相关的声明，可以通过指令添加：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> init --scope<span class=\"token operator\">=</span>scopeName -y</code></pre></div>\n<p>package.json 变为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@scopeName/package\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>由于用 <code class=\"language-text\">@</code> 声明了该包，npm 会将其认定为私有包，而在 npm 上托管私有包需要收费，所以可以在发布时添加<code class=\"language-text\">--access=public</code> 参数告知 <code class=\"language-text\">npm</code> 这不是私有包。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> publish --access<span class=\"token operator\">=</span>public</code></pre></div>\n<blockquote>\n<p>安装域级包时需要按照域级包全名来安装。</p>\n</blockquote>\n<h2>其它</h2>\n<h3>模块全局化</h3>\n<p>假设你在开发一个模块 <code class=\"language-text\">A</code>，同时需要在另外一个项目 <code class=\"language-text\">B</code> 中测试它，当然你可以将该模块的代码拷贝到需要使用它的项目中，但这也不是理想的方法，可以在模块 <code class=\"language-text\">A</code> 的目录下执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">link</span></code></pre></div>\n<p><code class=\"language-text\">npm link</code> 命令通过链接目录和可执行文件，实现任意位置的<code class=\"language-text\">npm</code>包命令的全局可执行。</p>\n<p><code class=\"language-text\">npm link</code> 主要做了两件事：</p>\n<ol>\n<li>为目标 <code class=\"language-text\">npm</code> 模块创建软链接，将其链接到全局 <code class=\"language-text\">node</code> 模块安装路径 <code class=\"language-text\">/usr/local/lib/node_modules/</code></li>\n<li>为目标 <code class=\"language-text\">npm</code>模块的可执行 <code class=\"language-text\">bin</code> 文件创建软链接，将其链接到全局 <code class=\"language-text\">node</code> 命令安装路径 <code class=\"language-text\">/usr/local/bin/</code></li>\n</ol>\n<h3>依赖锁定</h3>\n<p><code class=\"language-text\">npm</code> 默认安装模块时，会通过脱字符 <code class=\"language-text\">^</code> 来限定所安装模块的主版本号。可以配置 <code class=\"language-text\">npm</code> 通过波浪符 <code class=\"language-text\">~</code> 来限定安装模块版本号：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> save-prefix<span class=\"token operator\">=</span><span class=\"token string\">\"~\"</span></code></pre></div>\n<p>也可以配置仅安装精确版本号的模块</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> save-exact <span class=\"token boolean\">true</span></code></pre></div>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://juejin.im/post/5d08d3d3f265da1b7e103a4d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端工程化（5）：你所需要的npm知识储备都在这了</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/npm-install.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm 模块安装机制简介</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm scripts 使用指南</a></li>\n</ul>","timeToRead":16,"excerpt":"npm 是目前默认的 Node 包管理工具，在 javaScript 项目开发中得到了广泛使用。 node_modules npm…","frontmatter":{"title":"exploring npm","date":"July 05, 2019","description":"npm 是目前最流行的 Node 包管理工具，在 javaScript 项目开发中得到了广泛使用。"},"fields":{"slug":"/exploring-npm/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/exploring-npm/","previous":{"fields":{"slug":"/flex-box/"},"frontmatter":{"title":"Flexbox 布局"}},"next":{"fields":{"slug":"/sass-learning/"},"frontmatter":{"title":"sass 概述"}}}}}