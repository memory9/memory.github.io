{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-with-eslint-and-prettier/","webpackCompilationHash":"553e2d45f9700b050e58","result":{"data":{"site":{"siteMetadata":{"title":"Cube Blog","author":"memory"}},"markdownRemark":{"id":"f4d8f987-f584-5ae2-bafb-bc38faf3ebb5","html":"<p>An introduction of building a react project with eslint and prettier integration.</p>\n<h2>Eslint</h2>\n<p>目标：检验代码、保证代码的一致性，避免错误。</p>\n<p>作用：提供了 ECMAScript 规范的代码校验，我们可以使用开源的配置方案，这里采用的是 <code class=\"language-text\">eslint-config-airbnb</code> 。</p>\n<p>使用的几个插件：</p>\n<ul>\n<li>eslint-plugin-import 校验 import/export 语法，防止错误拼写文件路径和导出名称</li>\n<li>eslint-plugin-jsx-a11y 提供 jsx 元素可访问性校验</li>\n<li>eslint-plugin-react 校验 react</li>\n<li>\n<p>eslint-plugin-react-hooks 根据 Hooks API 校验 Hooks 的使用</p>\n<p>./node_muodules/bin/eslint —init</p>\n</li>\n</ul>\n<p>根据项目的需求，选择相应的配置，执行完毕后根目录下会多一个 <code class=\"language-text\">./eslintrc.js</code> 文件。</p>\n<p>可以在此文件中声明你想要的规则。</p>\n<p>Eslint 在配置中有一个 extends 的配置项，作用是将其他人写好的规则集成到 eslint 中，后面的规则优先级大于前面的规则。</p>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .eslintrc.js</span>\n<span class=\"token string\">'extends'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'react-app'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'airbnb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plugin:prettier/recommended'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>这三个规则的优先级就是 prettier > airbnb > react-app，以此类推。</p>\n<h2>Prettier</h2>\n<p>用途：统一代码风格。</p>\n<p>使用的插件：</p>\n<ul>\n<li>eslint-config-prettier</li>\n<li>eslint-plugin-prettier</li>\n</ul>\n<p>在 extends 中配置 <code class=\"language-text\">plugin:prettier/recommended</code> 相当于同时配置了</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">'extends'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'plugins'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prettier'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'rules'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'prettier/prettier'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>提交时校验代码</h2>\n<ul>\n<li>husky 处理 pre-commit、pre-push 等 githooks 的工具</li>\n<li>lint-staged 对 git 暂存区的代码，运行 linters 的工具</li>\n<li>commitlint 对提交信息进行规范约束</li>\n</ul>\n<p>安装与参考配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev husky lint-staged @commitlint/cli @commitlint/config-conventional</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// commitlint.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@commitlint/config-conventional'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@commitlint/config-conventional</code> 是遵从 angular 团队规范的 commit spec。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n\t...\n\t<span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"commit-msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commitlint -E HUSKY_GIT_PARAMS\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"src/*.{js, jsx, ts,tsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">\"node_modules/.bin/prettier --write\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"node_modules/.bin/eslint --fix\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"git add\"</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"src/*.{css, scss, less, json, html, md, markdown}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">\"node_modules/.bin/prettier --write\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"git add\"</span>\n\t\t<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\t...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>参考</h3>\n<p><a href=\"https://juejin.im/post/5d7b9863e51d456212049214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">如何在 React 项目中整合 Eslint 和 Prettier</a></p>\n<p><a href=\"https://juejin.im/post/5d3da1556fb9a07ed6581b82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 配置 eslint+airbnb+Prettier</a></p>\n<p><a href=\"https://juejin.im/post/5afc5242f265da0b7f44bee4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">优雅的提交你的 Git Commit Message</a></p>","timeToRead":3,"excerpt":"An introduction of building a react project with eslint and prettier integration. Eslint 目标：检验代码、保证代码的一致性，避免错误。 作用：提供了 ECMAScript…","frontmatter":{"title":"React 项目中集成 eslint 与 prettier","date":"October 20, 2019","description":"An introduction of building a react project with eslint and prettier integration."},"fields":{"slug":"/react-with-eslint-and-prettier/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-with-eslint-and-prettier/","previous":{"fields":{"slug":"/grid-layout/"},"frontmatter":{"title":"grid-layout"}},"next":{"fields":{"slug":"/conditional-rendering-in-react/"},"frontmatter":{"title":"React 中的条件渲染"}}}}}